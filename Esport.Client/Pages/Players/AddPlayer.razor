@page "/players/add"
@using Esport.Shared.DTO
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Esport.Client.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers

<h3>Dodaj nowego gracza</h3>

<PlayerForm Model="playerModel" Teams="teams" OnValidSubmitCallback="@( (PlayerForm<PlayerDto>.PlayerFormModel formModel) => OnValidForm(formModel) )" SubmitButtonText="Dodaj" />


<button class="btn" @onclick="GoBack">Powrót do listy graczy</button>

@if (!string.IsNullOrEmpty(message))
{
    <p class="error">@message</p>
}

@code {
    private PlayerDto playerModel = new PlayerDto();
    private List<TeamDto>? teams;
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        teams = await Http.GetFromJsonAsync<List<TeamDto>>("api/teams");
    }

    private async Task OnValidForm(PlayerForm<PlayerDto>.PlayerFormModel formModel)
    {
        // Serializujemy dane gracza do JSON
        var playerJson = System.Text.Json.JsonSerializer.Serialize(formModel.Player);
        // Przygotowujemy multipart/form-data
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(playerJson), "PlayerJson");

        if (formModel.ImageFile != null)
        {
            var stream = formModel.ImageFile.OpenReadStream(10 * 1024 * 1024); // limit 10 MB
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(formModel.ImageFile.ContentType);
            content.Add(fileContent, "Image", formModel.ImageFile.Name);
        }

        var response = await Http.PostAsync("api/players", content);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/players");
        }
        else
        {
            message = "Wystąpił błąd podczas dodawania gracza.";
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/players");
    }
}

<style>
.auth-container, .form-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 80vh;
    background: #f5f5f5;
    padding: 20px;
}

.auth-card, .form-card {
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    padding: 2rem;
    max-width: 400px;
    width: 100%;
    text-align: center;
}

h3 {
    text-align: center;
    margin-bottom: 1rem;
    color: #333;
}

.form-group {
    margin-bottom: 1rem;
    text-align: left;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
    color: #555;
}

.form-control {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 1rem;
}

.btn {
    display: block;
    width: 100%;
    padding: 0.7rem;
    background-color: #6200ee;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    margin-top: 1rem;
    transition: background-color 0.3s;
}

.btn:hover {
    background-color: #4e00d5;
}

.error {
    color: red;
    text-align: center;
    margin-top: 1rem;
}
</style>